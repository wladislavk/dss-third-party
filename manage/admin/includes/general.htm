<?php
//This Function is Used to format Data to insert Data in DB
function s_for($str)
{
	return addslashes(trim(htmlentities($str)));
}

//This Function is Used to Strip Slashes
function st($str)
{
	return stripslashes(trim($str));
}

//This Function is used for Paging
function paging($no_pages,$index_val,$vid)
{
	for($p_count=0;$p_count<$no_pages;$p_count++)
	{
		if($index_val == $p_count)
		{
		?>
			<strong><?=$p_count+1;?></strong>
		<?
		}
		else
		{
			
		?>
			<a href="<?=$_SERVER['PHP_SELF']?>?page=<?=$p_count?>&<?=$vid?>" class="fp">
			<?=$p_count+1;?></a>
		<?
		}
	}
		
}
function paging1($no_pages,$index_val,$vid,$index_val2 = 0)
{
	for($p_count=0;$p_count<$no_pages;$p_count++)
	{
		if($index_val == $p_count)
		{
		?>
			<strong><?=$p_count+1;?></strong>
		<?php
		}
		else
		{
			
		?>
			<a href="<?=$_SERVER['PHP_SELF']?>?page1=<?=$p_count?>&page2=<?=$index_val2?>&<?=$vid?>" class="fp">
			<?=$p_count+1;?></a>
		<?php
		}
	}
		
}

function paging2($no_pages,$index_val,$vid,$index_val1 = 0)
{
	for($p_count=0;$p_count<$no_pages;$p_count++)
	{
		if($index_val == $p_count)
		{
		?>
			<strong><?=$p_count+1;?></strong>
		<?php
		}
		else
		{
			
		?>
			<a href="<?=$_SERVER['PHP_SELF']?>?page1=<?=$index_val1?>&page2=<?=$p_count?>&<?=$vid?>" class="fp">
			<?=$p_count+1;?></a>
		<?php
		}
	}
		
}

// Function to Get Contacts
// Returns comma delimited list of contactids
function get_mdcontactids ($pid) {
  $contact_sql = "SELECT docsleep, docpcp, docdentist, docent, docmdother FROM dental_patients where patientid = '".s_for($pid)."';";
  $contact_res = mysql_query($contact_sql);
  $contactids = array();
  $row = mysql_fetch_array($contact_res, MYSQL_NUM);
  foreach ($row as $field) {
    if ($field != "Not Set") {
      $contacts = explode(",", $field);
      foreach ($contacts as $contact) {
				if ($contact != "") {
	        $contactids[] = $contact;
				}
      }
    }
  }
  $contactid_list = implode(",", $contactids);

  return $contactid_list;
}

function get_mdreferralids ($pid) {
  $contact_sql = "SELECT dental_referredby.referredbyid FROM dental_referredby JOIN dental_patients ON  dental_patients.referred_by=dental_referredby.referredbyid WHERE dental_patients.patientid IN('".s_for($pid)."');";
  $contact_res = mysql_query($contact_sql);
  $contactids = array();
  while ($row = mysql_fetch_array($contact_res, MYSQL_NUM)) {
    $contactids[] = $row[0];
  }
  $contactid_list = implode(",", $contactids);

  return $contactid_list;

}

// Retrieve Names Salutation and more from Database
// Returns an array of the form [patient, mds, or md_referrals][id]['fieldname']
function get_contact_info ($patient, $md_list, $md_referral_list) {
  $contact_info = array();
  if (isset($patient)) {
    $sql = "SELECT patientid AS id, salutation, firstname, lastname, add1, add2, city, state, zip, email, preferredcontact FROM dental_patients WHERE patientid IN('".$patient."');";
    $result = mysql_query($sql);
    while ($row = mysql_fetch_assoc($result)) {
      $contact_info['patient'][] = $row;
    }
  }
  if (isset($md_list) && $md_list != "") {
    $sql = "SELECT dental_contact.contactid AS id, dental_contact.salutation, dental_contact.firstname, dental_contact.lastname, dental_contact.middlename, dental_contact.company, dental_contact.add1, dental_contact.add2, dental_contact.city, dental_contact.state, dental_contact.zip, dental_contact.email, dental_contact.preferredcontact, dental_contacttype.contacttype FROM dental_contact LEFT JOIN dental_contacttype ON dental_contact.contacttypeid=dental_contacttype.contacttypeid WHERE dental_contact.contactid IN(".$md_list.");";
    $result = mysql_query($sql);
    while ($row = mysql_fetch_assoc($result)) {
      $contact_info['mds'][] = $row;
    }
  }
  if (isset($md_referral_list) && $md_referral_list != "") {
    $sql = "SELECT dental_referredby.referredbyid AS id, dental_referredby.salutation, dental_referredby.lastname, dental_referredby.middlename, dental_referredby.firstname, dental_referredby.company, dental_referredby.add1, dental_referredby.add2, dental_referredby.city, dental_referredby.state, dental_referredby.zip, dental_referredby.email, dental_referredby.preferredcontact, dental_contacttype.contacttype FROM dental_referredby LEFT JOIN dental_contacttype ON dental_referredby.contacttypeid=dental_contacttype.contacttypeid WHERE dental_referredby.referredbyid IN(".$md_referral_list.");";
    $result = mysql_query($sql);
    while ($row = mysql_fetch_assoc($result)) {
      $contact_info['md_referrals'][] = $row;
    }
  }

  return $contact_info;
}

// Function to Create Letters
function create_letter ($templateid, $pid = null, $stepid = null, $topatient = null, $md_list = null, $md_referral_list = null, $parentid = null, $template = null, $send_method = null, $status = null, $deleted = null) {
  $gen_date = date('Y-m-d H:i:s');
  if ($status == null) {
		$status = '0';
	}
  $delivered = '0';
  if ($deleted == null) {
    $deleted = '0';
  }
  $columns = "templateid";
  if (!isset($templateid)) {
    return "Error: Letter Template not specified";
  } else {
    $values = "'".mysql_real_escape_string($templateid)."'";
  }
  if ($status == 1) {
    $columns .= ", date_sent";
    $values .= ", NOW()";
  }
  if (isset($pid)) {
    $columns .= ", patientid";
    $values .= ", '".mysql_real_escape_string($pid)."'";
  }
  if (isset($stepid)) {
    $columns .= ", stepid";
    $values .= ", '".mysql_real_escape_string($stepid)."'";
  }
  if (isset($parentid)) {
    $columns .= ", parentid";
    $values .= ", '".mysql_real_escape_string($parentid)."'";
  }
  if (isset($topatient)) {
    $columns .= ", topatient";
    $values .= ", '".mysql_real_escape_string($topatient)."'";
  }
  if (isset($md_list)) {
    $columns .= ", md_list";
    $values .= ", '".mysql_real_escape_string($md_list)."'";
  }
  if (isset($md_referral_list)) {
    $columns .= ", md_referral_list";
    $values .= ", '".mysql_real_escape_string($md_referral_list)."'";
  }
  if (isset($template)) {
    $columns .= ",template ";
    $values .= ", '".mysql_real_escape_string($template)."'";
  }
  if (isset($send_method)) {
    $columns .= ", send_method";
    $values .= ", '".mysql_real_escape_string($send_method)."'";
  }
  if (isset($status)) {
		$columns .= ", status";
		$values .= ", '".mysql_real_escape_string($status)."'";
	}
  if (isset($deleted)) {
		$columns .= ", deleted";
		$values .= ", '".mysql_real_escape_string($deleted)."'";
	}

  $columns .= ", generated_date, delivered, docid, userid";
  $values .= ", '$gen_date', '$delivered', '". $_SESSION['docid'] ."', '". $_SESSION['userid'] ."'";
  $letter_query = "INSERT INTO dental_letters ($columns) VALUES ($values);";
  $letter_insert = mysql_query($letter_query);
  if(!$letter_insert) {
    return ("MYSQL ERROR:".mysql_errno().": ".mysql_error()."<br/>"."Error inserting Letter to Database");
  } else {
    $id = mysql_insert_id();
    // If parent and recipient ids are set, clear the recipient id from the parent

    return $id;
  }
}

function send_letter($letterid, $parent = null, $type, $recipientid, $template = null) {
  if (!isset($letterid)) {
		return false;
  }
	// Find out preferred send_method
	switch ($type) {
		case "patient":
			$sql = "SELECT preferredcontact FROM dental_patients WHERE patientid = '".$recipientid."';";
			$result = mysql_query($sql);
			$preferred = mysql_result($result, 0);
			break;
		case "md":
			$sql = "SELECT preferredcontact FROM dental_contact WHERE contactid = '".$recipientid."';";
			$result = mysql_query($sql);
			$preferred = mysql_result($result, 0);

			break;
		case "md_referral":
			$sql = "SELECT preferredcontact FROM dental_referredby WHERE referredbyid = '".$recipientid."';";
			$result = mysql_query($sql);
			$preferred = mysql_result($result, 0);
			break;
	}
  if ($parent != null) { // If this is the last contact on the letter, set the status to sent and update the template if it has changed
		$letter_query = "UPDATE dental_letters SET status='1', date_sent = NOW(), send_method='".$preferred."', template='".s_for($template)."' WHERE letterid='".$letterid."';";
		$letter_result = mysql_query($letter_query);
    return mysql_error();
  } else {
    $select_letter = "SELECT patientid, stepid, templateid, generated_date, send_method, topatient, md_list, md_referral_list FROM dental_letters WHERE letterid = '".$letterid."';";
		$select_result = mysql_query($select_letter);
		while ($row = mysql_fetch_assoc($select_result)) {
			$status = '1';
			if ($type == 'patient') {
				$topatient = '1';
				$removepatient = '0';
			} elseif ($type == 'md') {
				$md_list = $recipientid;
				$mds = explode(",", $row['md_list']);
				$key = array_search($recipientid, $mds);
				unset($mds[$key]);
				$new_mds = implode(",", $mds);
			} elseif ($type == 'md_referral') {
				$md_referral_list = $recipientid;
				$md_referrals = explode(",", $row['md_referral_list']);
				$key = array_search($recipientid, $md_referrals);
				unset($md_referrals[$key]);
				$new_md_referrals = implode(",", $mds);
			}
			if ($row['send_method'] == "") {
				$send_method = $preferred;
			} else {
				$send_method = $row['send_method'];
			}
		 	$letter = create_letter($row['templateid'], $row['patientid'], $row['stepid'], $topatient, $md_list, $md_referral_list, $letterid, $template, $send_method, $status); 	
		}
 		if (is_numeric($letter)) {	// new letter was created successfully Update the parent letter by removing the recipient
			if ($type == 'patient') {
				$update_letters = "UPDATE dental_letters SET topatient='".$removepatient."' WHERE letterid='".$letterid."';";
			} elseif ($type == 'md') {
				$update_letters = "UPDATE dental_letters SET md_list='".$new_mds."' WHERE letterid='".$letterid."';";
			} elseif ($type == 'md_referral') {
				$update_letters = "UPDATE dental_letters SET md_referral_list='".$new_md_referrals."' WHERE letterid='".$letterid."';";
			}
			$update_result = mysql_query($update_letters);
      if (!$update_result) {
				return mysql_error();
			} else {
				return $letter;
			}
		}
  }
}
// Actually Sends The Letter, returns send_method on success, false on failure.
function deliver_letter($letterid, $message) {
	if (!isset($letterid)) {
		return false;
	} else {
		$sql = "SELECT patientid, topatient, md_list, md_referral_list, send_method, docid, userid, templateid FROM dental_letters where letterid = '".$letterid."';";
		$result = mysql_query($sql);
		if (!$result) {
			return mysql_error();
 		}
		while ($row = mysql_fetch_assoc($result)) {
			if ($row['topatient']) {
				$id = $row['patientid'];
				$sql = "SELECT firstname, lastname, email FROM dental_patients WHERE patientid = '".$id."';";
				$myinfo = mysql_query($sql);
				$firstname = mysql_result($myinfo, 0, 0);
				$lastname = mysql_result($myinfo, 0, 1);
				$to_email = mysql_result($myinfo, 0, 2);
			} elseif ($row['md_list']) {
				$id = $row['md_list'];
				$sql = "SELECT firstname, lastname, email, fax, company, phone1 FROM dental_contact WHERE contactid = '".$id."';";
				$myinfo = mysql_query($sql);
				$firstname = mysql_result($myinfo, 0, 0);
				$lastname = mysql_result($myinfo, 0, 1);
				$to_email = mysql_result($myinfo, 0, 2);
				$fax = mysql_result($myinfo, 0, 3);
				$company = mysql_result($myinfo, 0, 4);
				$phone = mysql_result($myinfo, 0, 5);
			} elseif ($row['md_referral_list']) {
				$id = $row['md_referral_list'];
				$sql = "SELECT firstname, lastname, email, fax, company, phone1 FROM dental_referredby WHERE referredbyid = '".$id."';";
				$myinfo = mysql_query($sql);
				$firstname = mysql_result($myinfo, 0, 0);
				$lastname = mysql_result($myinfo, 0, 1);
				$to_email = mysql_result($myinfo, 0, 2);	
				$fax = mysql_result($myinfo, 0, 3);
				$company = mysql_result($myinfo, 0, 4);
				$phone = mysql_result($myinfo, 0, 5);
			}
			$to_name = $firstname . " " . $lastname;
			$send_method = $row['send_method'];
			$patientid = $row['patientid'];
			$docid = $row['docid'];
			$userid = $row['userid'];
			$templateid = $row['templateid'];
		}
		// Get Doctor's Name and Email
		$sql = "SELECT name, email FROM dental_users WHERE userid = '".$docid."';";
		$result = mysql_query($sql);
		$doc_name = mysql_result($result, 0, 0);
		$doc_email = mysql_result($result, 0, 1);

		// Send Email
		if ($send_method == 'email') {
			$email_success = send_email($to_name, $to_email, $doc_name, $doc_email, "DSS No Subject", $message);
		}

		// Create PDF
		$title = "Dental Sleep Solutions";
		$filename = 'f' . $docid . '_p' . $patientid . '_t' . $templateid . '_u' . $userid . '_' . date('Y-m-d_H-i-s') . '.pdf';
		/*$header_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/admin/images/email/dss_header.jpg";
		$footer_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/admin/images/email/dss_footer.jpg";
		$header_html = "<img src=\"" . $header_path . "\" alt=\"Dental Sleep Solutions\">";
		$footer_html = "<img src=\"" . $footer_path . "\" alt=\"Dental Sleep Solutions\">";
		$html = $header_html . $message . $footer_html;*/
		$html = $message;
		create_pdf($title, $filename, $html);
		$letter_query = "UPDATE dental_letters SET pdf_path = '" . $filename . "' WHERE letterid='".$letterid."';";
		$letter_result = mysql_query($letter_query);
	
		// Send Fax	
		if ($send_method == 'fax') {
			$subject = "Dental Sleep Solutions";
			$fax_success = send_fax($fax, $phone, $to_email, $to_name, $company, $subject, $doc_name, $filename); 
		}
		if ($email_success || $fax_success || $send_method == 'paper') {
			$letter_query = "UPDATE dental_letters SET delivery_date = NOW(), delivered='1' WHERE letterid='".$letterid."';";
			$letter_result = mysql_query($letter_query);
			if ($send_method == 'paper') {
				return "paper";
      }
		} elseif (!$email_success) {
			return "Email could not be sent";
		} elseif (!$fax_success) {
			return "Fax could not be sent";
		}
	}
}

function send_email($to_name, $to_email, $from_name, $from_email, $subject, $message, $attachment = null) {
	require_once($_SERVER['DOCUMENT_ROOT'] . '/manage/3rdParty/swift-4.0.6/lib/swift_required.php');
	$email = Swift_Message::newInstance();

	$to = "$to_name <$to_email>";
	$from = "$from_name <$from_email>";

	$header_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/admin/images/email/dss_email_header.jpg";
	$header_html =	"<img src=\"" . $email->embed(Swift_Image::fromPath($header_path)) . "\" alt=\"Dental Sleep Solutions\" />";
	$footer_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/admin/images/email/dss_email_footer.jpg";
	$footer_html =	"<img src=\"" . $email->embed(Swift_Image::fromPath($footer_path)) . "\" alt=\"Dental Sleep Solutions\" />";

	$TextMessage = strip_tags($message,"<br>");
	$HTMLMessage = "$header_html<table width=\"600px\"><tr><td>$message</tr></td></table>$footer_html"; 
	
	$email->setSubject('Dental Sleep Solutions Correspondance');
	$email->setFrom(array($from_email => $from_name));
	$email->setTo(array($to_email => $to_name));
	$email->setBody($HTMLMessage, 'text/html');
	if ($attachment != '') {
		$email->attach(Swift_Attachment::fromPath($attachment));
	}

	$transport = Swift_SendmailTransport::newInstance('/usr/sbin/sendmail -bs');

	$mailer = Swift_Mailer::newInstance($transport);

	if (!$mailer->send($email, $failures)) {
		if (count($failures) > 0) {
			return "Rejected Email Address";
		} else {
			return false;
		}
	} else {
		return true;
	}
}

function send_fax($fax, $phone, $email, $name, $company, $subject, $sender_name, $pdf_filename) {
	$client = new SoapClient("https://faxregistration.com/sfaxws/sfaxapi.asmx?wsdl");

	$fax = preg_replace("/[^0-9]/", "", $fax);
	$phone = preg_replace("/[^0-9]/", "", $phone);

	//set fax request variables
	$sUserId = "dentalsleepsolutions"; // <-- Important: Your Sfax userID
	$sPassword = "sfaxDSS54321!"; // <-- Important: Your Sfax password
	$sRecipientName = $name;
	$sRecipientCompany = $company;
	$sRecipientPhone = "1" . $phone; // 1+; all digits only
	$sRecipientFax = "1" . $fax; // 1+; all digits only
	$sRecipientEmail = $email;
	$sSubject = $subject;
	$sDocType = "PDF"; // <--Important: tells Sfax how to process the document.
	$sDocName = $pdf_filename;
	$sImage = "";
	$sTrackingKey = $pdf_filename;
	$sDocMerge = "false";
	$sNotes = "";
	$sSenderName = $sender_name;
	// CoverSheet values are:
	// 1) “Default” – tells the fax engine to use the default cover sheet.
	// 2) “<NameOfCoverSheet>” – tells the fax engine to use the cover sheet named.
	$sCoverSheet = "Default";

	//convert c:\test.doc to Base64 string
	$filename = $_SERVER['DOCUMENT_ROOT'] . '/manage/letterpdfs/' . $pdf_filename;
	$handle = fopen($filename, "rb");
	$contents = fread($handle, filesize($filename));
	fclose($handle);
	$sImage = base64_encode($contents);

	//create fax request document
	$xml = new DOMDocument('1.0', 'utf-16');
	$xml->formatOutput = true;
	$xml->preserveWhiteSpace = false;
	$xml->appendChild($xml->createElement('FaxRequest'));
	$xml->documentElement->appendChild($xml->createElement('UserId', $sUserId));
	$xml->documentElement->appendChild($xml->createElement('Password', $sPassword));
	$xml->documentElement->appendChild($xml->createElement('RecipientName', $sRecipientName));
	$xml->documentElement->appendChild($xml->createElement('RecipientCompany', $sRecipientCompany));
	$xml->documentElement->appendChild($xml->createElement('RecipientPhone', $sRecipientPhone));
	$xml->documentElement->appendChild($xml->createElement('RecipientFax', $sRecipientFax));
	$xml->documentElement->appendChild($xml->createElement('RecipientEmail', $sRecipientEmail));
	$xml->documentElement->appendChild($xml->createElement('Subject', $sSubject));
	$xml->documentElement->appendChild($xml->createElement('DocType', $sDocType));
	$xml->documentElement->appendChild($xml->createElement('DocName', $sDocName));
	$xml->documentElement->appendChild($xml->createElement('image', $sImage));
	$xml->documentElement->appendChild($xml->createElement('TrackingKey', $sTrackingKey));
	$xml->documentElement->appendChild($xml->createElement('DocMerge', $sDocMerge));
	$xml->documentElement->appendChild($xml->createElement('Notes', $sNotes));
	$xml->documentElement->appendChild($xml->createElement('SenderName', $sSenderName));
	$xml->documentElement->appendChild($xml->createElement('CoverSheet', $sCoverSheet));

	//send fax as string
	$sXML = $xml->saveXML($xml->documentElement);
	$params = array('sDoc'=>$sXML);
	$result = $client->sendFaxString($params);

	if (strpos($result->sendFaxStringResult, "Success")) {
		return true;
	} else {
		return false;
	}
}

function create_pdf($title, $filename, $html) {
	require_once($_SERVER['DOCUMENT_ROOT'] . '/manage/3rdParty/tcpdf/config/lang/eng.php');
	require_once($_SERVER['DOCUMENT_ROOT'] . '/manage/3rdParty/tcpdf/tcpdf.php');

	// Extend the TCPDF class to create custom Header and Footer
	class MYPDF extends TCPDF {

			//Page header
			public function Header() {
					// Logo
					$image_file = K_PATH_IMAGES.'dss_print_header.jpg';
					//$this->Image($image_file, 0, 0, '', '', 'JPG', '', 'M', false, 300, '', false, false, 0, false, false, false);
			}

			// Page footer
			public function Footer() {
					// Position at 26 mm from bottom
					$this->SetY(-26);
					$image_file = K_PATH_IMAGES.'dss_print_footer.jpg';
					//$this->Image($image_file, 0, 281, '', '', 'JPG', '', 'M', false, 300, '', false, false, 0, false, false, false);					
			}
	}
	
	// create new PDF document
	$pdf = new MYPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

	// set document information
	$pdf->SetCreator(PDF_CREATOR);
	$pdf->SetAuthor('Dental Sleep Solutions');
	$pdf->SetTitle($title);
	$pdf->SetSubject($title);
	$pdf->SetKeywords('DSS Correspondance');

	// set default monospaced font
	$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

	//set margins
	$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
	$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
	$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

	//set auto page breaks
	$pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

	//set image scale factor
	$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

	//set some language-dependent strings
	$pdf->setLanguageArray($l);

	// set font
	$pdf->SetFont('dejavusans', '', 10);

	// add a page
	$pdf->AddPage();

	// output the HTML content
	$pdf->writeHTML($html, true, false, true, false, '');

	//Close and output PDF document
	$pdf->Output($_SERVER['DOCUMENT_ROOT'] . '/manage/letterpdfs/' . $filename, 'F');
}

/* Set $parent to true if you want to delete the original letter including all contacts
 * if $parent is false or not set, one contact will be removed from the letter and a new letter will be created
 * with the deleted flag set to true.
 * $type is either patient, md, or md_referral.  It refers to the type of contact who's letter is being deleted
 * $recipientid is the id of the contact to be removed from the original letter
 * $template is for a modified template (including tokens) if the original template has been edited.
 */
function delete_letter($letterid, $parent = null, $type, $recipientid, $template = null) {
  if (!isset($letterid)) {
		return false;
  } elseif ($parent == true) {
		$letter_query = "UPDATE dental_letters SET deleted='1' WHERE letterid='".$letterid."';";
		$letter_result = mysql_query($letter_query);
  } else {
    $select_letter = "SELECT patientid, stepid, templateid, generated_date, send_method, topatient, md_list, md_referral_list FROM dental_letters WHERE letterid = '".$letterid."';";
		$select_result = mysql_query($select_letter);
		while ($row = mysql_fetch_assoc($select_result)) {
			$deleted = '1';
			if ($type == 'patient') {
				$topatient = '1';
				$removepatient = '0';
			} elseif ($type == 'md') {
				$md_list = $recipientid;
				$mds = explode(",", $row['md_list']);
				$key = array_search($recipientid, $mds);
				unset($mds[$key]);
				$new_mds = implode(",", $mds);
			} elseif ($type == 'md_referral') {
				$md_referral_list = $recipientid;
				$md_referrals = explode(",", $row['md_referral_list']);
				$key = array_search($recipientid, $md_referrals);
				unset($md_referrals[$key]);
				$new_md_referrals = implode(",", $mds);
			}
		 	$letter = create_letter($row['templateid'], $row['patientid'], $row['stepid'], $topatient, $md_list, $md_referral_list, $letterid, $template, $row['send_method'], '', $deleted); 	
		}
 		if (is_numeric($letter)) {
			if ($type == 'patient') {
				$update_letters = "UPDATE dental_letters SET topatient='".$removepatient."' WHERE letterid='".$letterid."';";
			} elseif ($type == 'md') {
				$update_letters = "UPDATE dental_letters SET md_list='".$new_mds."' WHERE letterid='".$letterid."';";
			} elseif ($type == 'md_referral') {
				$update_letters = "UPDATE dental_letters SET md_referral_list='".$new_md_referrals."' WHERE letterid='".$letterid."';";
			}
			$update_result = mysql_query($update_letters);
      if (!$update_result) {
				return false;
			} else {
				return $letter;
			}
		}
  }
}

/**
 * Returns a mysql resultset resource for dental_users table on success,
 * false otherwise. Only franchisees are included (no staff).
 */
function get_franchisees() {
    $sql = "SELECT * FROM dental_users WHERE docid = 0 ORDER BY name ASC";
    return mysql_query($sql);
}

/**
 * Returns a mysql resultset resource for dental_patients table on success,
 * false otherwise.
 *
 * @param $franchisee_id Required. Limits the patients returned by
 *                       the franchisee id.
 */
function get_patients($franchisee_id = -1) {
    $sql = "SELECT * FROM dental_patients WHERE docid = $franchisee_id ORDER BY lastname ASC, firstname ASC";
    return mysql_query($sql);
}

/**
 * Returns the class 'arrow_asc' or 'arrow_desc' depending on the params
 * passed in to the function.  Returns false if $sort_by or $sort_compare_to
 * are null.
 *
 * @param $sort_by Required. The db table column being sorted.
 * @param $sort_compare_to Required. The html table column we are checking.
 * @param $sort_direction Optional (default 'asc'). Direction of the sort (desc|asc).
 */
function get_sort_arrow_class($sort_by, $sort_compare_to, $sort_direction = 'asc') {
    print "$sort_by:$sort_compare_to ";

    $arrow = '';
    
    if ($sort_by == $sort_compare_to) {
        $arrow .= 'arrow_' . strtolower($sort_direction);
    }
    
    return $arrow;
}

function get_sort_dir($sort_by, $sort_compare_to, $current_sort_dir = 'asc') {
    $direction = $current_sort_dir;
    
    if ($sort_by == $sort_compare_to) {
        $direction = (strtolower($current_sort_dir) == 'asc') ? 'desc' : 'asc';
    }
    
    return $direction;
}
?>

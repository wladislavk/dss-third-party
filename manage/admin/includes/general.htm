<?php

// Set the following two variables to allow/disable email.  It will be sent via paper mail if disabled or not set.
$allowemail = false;
// safeemail lists exceptions that will be allowed through.  Format: templateid[comma] [comment w/ title]
$safeemails = array(
	//5, // Welcome Letter Email
);

//This Function is Used to format Data to insert Data in DB
function s_for($str)
{
	return addslashes(trim(htmlentities($str)));
}

//This Function is Used to Strip Slashes
function st($str)
{
	return stripslashes(trim($str));
}

//This Function is used for Paging
function paging($no_pages,$index_val,$vid)
{
	for($p_count=0;$p_count<$no_pages;$p_count++)
	{
		if($index_val == $p_count)
		{
		?>
			<strong><?=$p_count+1;?></strong>
		<?
		}
		else
		{
			
		?>
			<a href="<?=$_SERVER['PHP_SELF']?>?page=<?=$p_count?>&<?=$vid?>" class="fp">
			<?=$p_count+1;?></a>
		<?
		}
	}
		
}
function paging1($no_pages,$index_val,$vid,$index_val2 = 0)
{
	for($p_count=0;$p_count<$no_pages;$p_count++)
	{
		if($index_val == $p_count)
		{
		?>
			<strong><?=$p_count+1;?></strong>
		<?php
		}
		else
		{
			
		?>
			<a href="<?=$_SERVER['PHP_SELF']?>?page1=<?=$p_count?>&page2=<?=$index_val2?>&<?=$vid?>" class="fp">
			<?=$p_count+1;?></a>
		<?php
		}
	}
		
}

function paging2($no_pages,$index_val,$vid,$index_val1 = 0)
{
	for($p_count=0;$p_count<$no_pages;$p_count++)
	{
		if($index_val == $p_count)
		{
		?>
			<strong><?=$p_count+1;?></strong>
		<?php
		}
		else
		{
			
		?>
			<a href="<?=$_SERVER['PHP_SELF']?>?page1=<?=$index_val1?>&page2=<?=$p_count?>&<?=$vid?>" class="fp">
			<?=$p_count+1;?></a>
		<?php
		}
	}
		
}

// Function to Get Contacts
// Returns comma delimited list of contactids
function get_mdcontactids ($pid, $active = true) {
  $contact_sql = "SELECT docsleep, docpcp, docdentist, docent, docmdother, docmdother2, docmdother3 FROM dental_patients where patientid = '".s_for($pid)."';";
  $contact_res = mysql_query($contact_sql);
  $contactids = array();
  $row = mysql_fetch_array($contact_res, MYSQL_NUM);
  foreach ($row as $field) {
    if ($field != "Not Set") {
      $contacts = explode(",", $field);
      foreach ($contacts as $contact) {
				if ($contact != "") {
		if(!in_array($contact, $contactids)){
		  if($active){
		    $a_sql = "select status FROM dental_contact WHERE contactid='".mysql_real_escape_string($contact)."'";
		    $a_q = mysql_query($a_sql);
		    $a_r = mysql_fetch_assoc($a_q);
		    if($a_r['status']==1){
	              $contactids[] = $contact;
		    }
                  }else{
                    $contactids[] = $contact;
		  }
		}
				}
      }
    }
  }
  $contactid_list = implode(",", $contactids);

  return $contactid_list;
}

function get_mdreferralids ($pid, $active = true) {
  $contact_sql = "SELECT dental_contact.contactid FROM dental_contact JOIN dental_patients ON  dental_patients.referred_by=dental_contact.contactid 
	JOIN dental_contacttype ct ON ct.contacttypeid = dental_contact.contacttypeid
	WHERE dental_patients.patientid IN('".$pid."') AND dental_patients.referred_source IN('2') AND ct.physician=1;";
  $contact_res = mysql_query($contact_sql);
  $contactids = array();
  while ($row = mysql_fetch_array($contact_res, MYSQL_NUM)) {
        if(!in_array($row[0], $contactids)){
                  if($active){
                    $a_sql = "select status FROM dental_contact WHERE contactid='".mysql_real_escape_string($row[0])."'";
                    $a_q = mysql_query($a_sql);
                    $a_r = mysql_fetch_assoc($a_q);
                    if($a_r['status']==1){
                      $contactids[] = $row[0];
                    }
                  }else{
                    $contactids[] = $row[0];
                  }

	}
  }

  $contactid_list = implode(",", $contactids);

  return $contactid_list;

}

function get_ptreferralids ($pid) {
	$pt_sql = "SELECT referred_source FROM dental_patients WHERE patientid=".$pid." LIMIT 1";
	$pq = mysql_query($pt_sql);
	$prow = mysql_fetch_assoc($pq);
	if($prow['referred_source']==1){
		$contact_sql = "SELECT pr.patientid FROM dental_patients pr INNER JOIN dental_patients p ON p.referred_by = pr.patientid WHERE p.patientid IN('".s_for($pid)."')";
	}elseif($prow['referred_source']==2){
		$contact_sql = "SELECT dental_contact.contactid FROM dental_contact JOIN dental_patients ON  dental_patients.referred_by=dental_contact.contactid 
		JOIN dental_contacttype ct ON ct.contacttypeid = dental_contact.contacttypeid
			WHERE dental_patients.patientid IN('".s_for($pid)."') AND ct.physician != 1;";
	}
	$contact_res = mysql_query($contact_sql);
  $contactids = array();
  while ($row = mysql_fetch_array($contact_res, MYSQL_NUM)) {
    $contactids[] = $row[0];
  }
  $contactid_list = implode(",", $contactids);

  return $contactid_list;

}


// Retrieve Names Salutation and more from Database
// Returns an array of the form [patient, mds, or md_referrals][id]['fieldname']
function get_contact_info ($patient, $md_list, $md_referral_list, $referral_source = null, $letterid = 0) {
  $contact_info = array();
  if (isset($patient)) {
    $sql = "SELECT patientid AS id, salutation, firstname, lastname, add1, add2, city, state, zip, email, preferredcontact, ".$letterid." AS letterid FROM dental_patients WHERE patientid IN('".$patient."');";
    $result = mysql_query($sql);
    while ($row = mysql_fetch_assoc($result)) {
      $contact_info['patient'][] = $row;
    }
  }
  if (isset($md_list) && $md_list != "") {
    $sql = "SELECT dental_contact.contactid AS id, dental_contact.salutation, dental_contact.firstname, dental_contact.lastname, dental_contact.middlename, dental_contact.company, dental_contact.add1, dental_contact.add2, dental_contact.city, dental_contact.state, dental_contact.zip, dental_contact.email, dental_contact.fax, dental_contact.preferredcontact, dental_contacttype.contacttype, ".$letterid." AS letterid, dental_contact.status FROM dental_contact LEFT JOIN dental_contacttype ON dental_contact.contacttypeid=dental_contacttype.contacttypeid WHERE dental_contact.contactid IN(".$md_list.");";
    $result = mysql_query($sql);
    while ($row = mysql_fetch_assoc($result)) {
      $contact_info['mds'][] = $row;
    }
  }
  if (isset($md_referral_list) && $md_referral_list != "") {
	if($referral_source==1){
		$sql = "SELECT p.patientid AS id, 
				p.salutation, 
				p.lastname, 
				p.middlename, 
				p.firstname, 
				'' as company, 
				p.add1, 
				p.add2, 
				p.city, 
				p.state, 
				p.zip, 
				p.email, 
				'' as fax, 
				p.preferredcontact, 
				'' as contacttypeid, 
				".$letterid." AS letterid,
				p.status
			FROM dental_patients p WHERE p.patientid IN(".$md_referral_list.");";
	}else{
    		$sql = "SELECT dental_contact.contactid AS id, dental_contact.salutation, dental_contact.lastname, dental_contact.middlename, dental_contact.firstname, dental_contact.company, dental_contact.add1, dental_contact.add2, dental_contact.city, dental_contact.state, dental_contact.zip, dental_contact.email, dental_contact.fax, dental_contact.preferredcontact, dental_contact.contacttypeid, ".$letterid." AS letterid, dental_contact.status FROM dental_contact LEFT JOIN dental_contacttype ON dental_contact.contacttypeid=dental_contacttype.contacttypeid WHERE dental_contact.contactid IN(".$md_referral_list.");";
	}
    $result = mysql_query($sql);
    while ($row = mysql_fetch_assoc($result)) {
      $contact_info['md_referrals'][] = $row;
    }
  }

  return $contact_info;
}



//get number of contacts for letter
function num_letter_contacts($lid){
  $sql = "SELECT topatient, md_list, md_referral_list FROM dental_letters l
		WHERE letterid='".mysql_real_escape_string($lid)."' OR parentid='".mysql_real_escape_string($lid)."'";
  $q = mysql_query($sql);
  $num_contacts = 0;
  while($r = mysql_fetch_assoc($q)){
    if($r['topatient']==1){
	$num_contacts++;
    }
if($r['md_list']!=''){
    $num_contacts += count(explode(',',$r['md_list']));
}
if($r['md_referral_list']!=''){
    $num_contacts += count(explode(',',$r['md_referral_list']));
}
  }
  return $num_contacts;  
}

//To remove referral source from md list
class MDReferralFilter {
        private $num;

        function __construct($num) {
                $this->num = $num;
        }

        function isReferrer($i) {
                return $i != $this->num;
        }
}

// Function to Create Letters
function create_letter ($templateid, $pid = null, $info_id = null, $topatient = null, $md_list = null, $md_referral_list = null, $parentid = null, $template = null, $send_method = null, $status = null, $deleted = null, $check_recipient = true) {

  if(isset($_SESSION['docid'])){
    $l_sql = "SELECT use_letters FROM dental_users WHERE userid='".mysql_real_escape_string($_SESSION['docid'])."'";
    $l_q = mysql_query($l_sql);
    $l_r = mysql_fetch_assoc($l_q);
    if($l_r['use_letters'] != '1'){
      return -1;
    }
  }

  if((!$topatient && !$md_referral_list && !$md_list) || ($check_recipient && !$md_referral_list && !$md_list && ($templateid==16 || $templateid==19))){
	$nsql = "SELECT name FROM dental_letter_templates where id=".$templateid;
	$nq = mysql_query($nsql);
	$nrow = mysql_fetch_assoc($nq);
	/* ?><script type="text/javascript">
		alert('The letter "<?= $nrow['name']; ?>" will not be created because no recipient is set. To create the letter, delete the current flowsheet step and specify appropriate contacts in the Patient Info section.');
	</script>
	<?php
	*/
    return 0;
  }

  //To remove referral source from md list if exists
  $md_array = explode(',', $md_list);
  $md_array = array_filter($md_array, array(new MDReferralFilter($md_referral_list), 'isReferrer'));
  $md_list = implode(',', $md_array);

  $gen_date = date('Y-m-d H:i:s');
  if ($status == null) {
		$status = '0';
	}
  $delivered = '0';
  if ($deleted == null) {
    $deleted = '0';
  }
  $columns = "templateid";
  if (!isset($templateid)) {
    return "Error: Letter Template not specified";
  } else {
    $values = "'".mysql_real_escape_string($templateid)."'";
  }
  if ($status == 1) {
    $columns .= ", date_sent";
    $values .= ", NOW()";
  }
  if (isset($pid)) {
    $columns .= ", patientid";
    $values .= ", '".mysql_real_escape_string($pid)."'";
  }
  if (isset($info_id)) {
    $columns .= ", info_id";
    $values .= ", '".mysql_real_escape_string($info_id)."'";
  }
  if (isset($parentid)) {
    $columns .= ", parentid";
    $values .= ", '".mysql_real_escape_string($parentid)."'";
  }
  if (isset($topatient)) {
    $columns .= ", topatient";
    $values .= ", '".mysql_real_escape_string($topatient)."'";
  }
  if (isset($md_list)) {
    $columns .= ", md_list";
    $values .= ", '".mysql_real_escape_string($md_list)."'";
  }
  if (isset($md_referral_list)) {
    $columns .= ", md_referral_list";
    $values .= ", '".mysql_real_escape_string($md_referral_list)."'";
  }
  if (isset($template)) {
    $columns .= ",template ";
    $values .= ", '".mysql_real_escape_string($template)."'";
  }
  if (isset($send_method)) {
    $columns .= ", send_method";
    $values .= ", '".mysql_real_escape_string($send_method)."'";
  }
  if (isset($status)) {
		$columns .= ", status";
		$values .= ", '".mysql_real_escape_string($status)."'";
	}
  if (isset($deleted)) {
		$columns .= ", deleted";
		$values .= ", '".mysql_real_escape_string($deleted)."'";
	}

  $columns .= ", generated_date, delivered, docid, userid";
  $values .= ", '$gen_date', '$delivered', '". $_SESSION['docid'] ."', '". $_SESSION['userid'] ."'";
  $letter_query = "INSERT INTO dental_letters ($columns) VALUES ($values);";
  $letter_insert = mysql_query($letter_query);
  if(!$letter_insert) {
    return ("MYSQL ERROR:".mysql_errno().": ".mysql_error()."<br/>"."Error inserting Letter to Database");
  } else {
    $id = mysql_insert_id();
    // If parent and recipient ids are set, clear the recipient id from the parent

    return $id;
  }
}



// Function to Create Letters
function create_welcome_letter ($templateid, $md_list, $docid) {

  $gen_date = date('Y-m-d H:i:s');
  $status = '0';
  $delivered = '0';
  $deleted = '0';
  $columns = "templateid";
  $values = "'".mysql_real_escape_string($templateid)."'";
  if ($status == 1) {
    $columns .= ", date_sent";
    $values .= ", NOW()";
  }
  if (isset($md_list)) {
    $columns .= ", md_list";
    $values .= ", '".mysql_real_escape_string($md_list)."'";
  }
  if (isset($status)) {
                $columns .= ", status";
                $values .= ", '".mysql_real_escape_string($status)."'";
        }
  if (isset($deleted)) {
                $columns .= ", deleted";
                $values .= ", '".mysql_real_escape_string($deleted)."'";
        }

  $columns .= ", generated_date, delivered, docid, userid";
  $values .= ", '$gen_date', '$delivered', '". $docid ."', '". $docid ."'";
  $letter_query = "INSERT INTO dental_letters ($columns) VALUES ($values);";
  $letter_insert = mysql_query($letter_query);
  if(!$letter_insert) {
    return ("MYSQL ERROR:".mysql_errno().": ".mysql_error()."<br/>"."Error inserting Letter to Database");
  } else {
    $id = mysql_insert_id();
    // If parent and recipient ids are set, clear the recipient id from the parent

    return $id;
  }
}




function save_letter($letterid, $parent = null, $type, $recipientid, $template = null) {
  if (!isset($letterid)) {
		return false;
  }
	// Enable/Disable email
	if ($preferred == "email") {
		$sql = "SELECT templateid FROM dental_letters WHERE letterid = '".s_for($letterid)."';";
		$result = mysql_query($sql);
		$templateid = mysql_result($result, 0);
		if(empty($allowemail) && !in_array($templateid, $safeemails)) {
			$preferred = "paper";
		}
	}
  if ($parent != null) { // If this is the last contact on the letter, set the status to sent and update the template if it has changed
		$letter_query = "UPDATE dental_letters SET edit_date = NOW(), edit_userid = '".$_SESSION['userid']."',date_sent = NOW(), send_method='".s_for($preferred)."', template='".s_for($template)."' WHERE letterid='".s_for($letterid)."';";
		$letter_result = mysql_query($letter_query);
    return mysql_error();
  } else {
    $select_letter = "SELECT patientid, info_id, templateid, generated_date, send_method, topatient, md_list, md_referral_list FROM dental_letters WHERE letterid = '".s_for($letterid)."';";
		$select_result = mysql_query($select_letter);
		while ($row = mysql_fetch_assoc($select_result)) {
			$status = '0';
			if ($type == 'patient') {
				$topatient = '1';
				$removepatient = '0';
			} elseif ($type == 'md') {
				$md_list = $recipientid;
				$mds = explode(",", $row['md_list']);
				$key = array_search($recipientid, $mds);
				unset($mds[$key]);
				$new_mds = implode(",", $mds);
			} elseif ($type == 'md_referral') {
				$md_referral_list = $recipientid;
				$md_referrals = explode(",", $row['md_referral_list']);
				$key = array_search($recipientid, $md_referrals);
				unset($md_referrals[$key]);
				$new_md_referrals = implode(",", $mds);
			}
			if ($row['send_method'] == "") {
				$send_method = $preferred;
			} else {
				$send_method = $row['send_method'];
				if ($send_method == "email") {
					if(empty($allowemail) && !in_array($templateid, $safeemails)) {
						$send_method = "paper";
					}
				}
			}
		 	$letter = create_letter($row['templateid'], $row['patientid'], $row['info_id'], $topatient, $md_list, $md_referral_list, $letterid, $template, $send_method, $status); 	
		}
 		if (is_numeric($letter)) {	// new letter was created successfully Update the parent letter by removing the recipient
                                $update_edit = "UPDATE dental_letters SET edit_date = NOW(), edit_userid = '".$_SESSION['userid']."' WHERE letterid='".$letter."'";
				mysql_query($update_edit);
			if ($type == 'patient') {
				$update_letters = "UPDATE dental_letters SET topatient='".$removepatient."' WHERE letterid='".$letterid."';";
			} elseif ($type == 'md') {
				$update_letters = "UPDATE dental_letters SET md_list='".$new_mds."' WHERE letterid='".$letterid."';";
			} elseif ($type == 'md_referral') {
				$update_letters = "UPDATE dental_letters SET md_referral_list='".$new_md_referrals."' WHERE letterid='".$letterid."';";
			}
			$update_result = mysql_query($update_letters);
      if (!$update_result) {
				return mysql_error();
			} else {
				return $letter;
			}
		}
  }
}

function send_letter($letterid, $parent = null, $type, $recipientid, $template = null) {
  if (!isset($letterid)) {
                return false;
  }
        // Find out preferred send_method
        switch ($type) {
                case "patient":
                        $sql = "SELECT preferredcontact FROM dental_patients WHERE patientid = '".$recipientid."';";
                        $result = mysql_query($sql);
                        $preferred = mysql_result($result, 0);
                        break;
                case "md":
                        $sql = "SELECT preferredcontact FROM dental_contact WHERE contactid = '".$recipientid."';";
                        $result = mysql_query($sql);
                        $preferred = mysql_result($result, 0);

                        break;
                case "md_referral":
                        $sql = "SELECT preferredcontact FROM dental_contact WHERE contactid = '".$recipientid."';";
                        $result = mysql_query($sql);
                        $preferred = mysql_result($result, 0);
                        break;
        }
        // Enable/Disable email
        if ($preferred == "email") {
                $sql = "SELECT templateid FROM dental_letters WHERE letterid = '".s_for($letterid)."';";
                $result = mysql_query($sql);
                $templateid = mysql_result($result, 0);
                if(empty($allowemail) && !in_array($templateid, $safeemails)) {
                        $preferred = "paper";
                }
        }
  if ($parent != null) { // If this is the last contact on the letter, set the status to sent and update the template if it has changed
                $letter_query = "UPDATE dental_letters SET parentid=null, status='1', date_sent = NOW(), send_method='".s_for($preferred)."', template='".s_for($template)."' WHERE letterid='".s_for($letterid)."';";
                $letter_result = mysql_query($letter_query);
                $parent_query = "UPDATE dental_letters SET parentid=null WHERE parentid='".$letterid."';";
                $parent_result = mysql_query($parent_query);
    return mysql_error();
  } else {
    $select_letter = "SELECT patientid, info_id, templateid, generated_date, send_method, topatient, md_list, md_referral_list FROM dental_letters WHERE letterid = '".s_for($letterid)."';";
                $select_result = mysql_query($select_letter);
                while ($row = mysql_fetch_assoc($select_result)) {
                        $status = '1';
                        if ($type == 'patient') {
                                $topatient = '1';
                                $removepatient = '0';
                        } elseif ($type == 'md') {
                                $md_list = $recipientid;
                                $mds = explode(",", $row['md_list']);
                                $key = array_search($recipientid, $mds);
                                unset($mds[$key]);
                                $new_mds = implode(",", $mds);
                        } elseif ($type == 'md_referral') {
                                $md_referral_list = $recipientid;
                                $md_referrals = explode(",", $row['md_referral_list']);
                                $key = array_search($recipientid, $md_referrals);
                                unset($md_referrals[$key]);
                                $new_md_referrals = implode(",", $mds);
                        }
                        if ($row['send_method'] == "") {
                                $send_method = $preferred;
                        } else {
                                $send_method = $row['send_method'];
                                if ($send_method == "email") {
                                        if(empty($allowemail) && !in_array($templateid, $safeemails)) {
                                                $send_method = "paper";
                                        }
                                }
                        }
                        $letter = create_letter($row['templateid'], $row['patientid'], $row['info_id'], $topatient, $md_list, $md_referral_list, $letterid, $template, $send_method, $status);
                }
                if (is_numeric($letter)) {      // new letter was created successfully Update the parent letter by removing the recipient
                        if ($type == 'patient') {
                                $update_letters = "UPDATE dental_letters SET topatient='".$removepatient."' WHERE letterid='".$letterid."';";
                        } elseif ($type == 'md') {
                                $update_letters = "UPDATE dental_letters SET md_list='".$new_mds."' WHERE letterid='".$letterid."';";
                        } elseif ($type == 'md_referral') {
                                $update_letters = "UPDATE dental_letters SET md_referral_list='".$new_md_referrals."' WHERE letterid='".$letterid."';";
                        }
                        $update_result = mysql_query($update_letters);
      if (!$update_result) {
                                return mysql_error();
                        } else {
                                return $letter;
                        }
                }
  }
}


// Actually Sends The Letter, returns send_method on success, false on failure.
function deliver_letter($letterid, $message) {
        $send_success = true;
	if (!isset($letterid)) {
		return false;
	} else {
		$sql = "SELECT patientid, topatient, md_list, md_referral_list, send_method, docid, userid, templateid FROM dental_letters where letterid = '".$letterid."';";
		$result = mysql_query($sql);
		if (!$result) {
			return mysql_error();
 		}
		while ($row = mysql_fetch_assoc($result)) {
			if ($row['topatient']) {
				$id = $row['patientid'];
				$sql = "SELECT firstname, lastname, email FROM dental_patients WHERE patientid = '".$id."';";
				$myinfo = mysql_query($sql);
				$firstname = mysql_result($myinfo, 0, 0);
				$lastname = mysql_result($myinfo, 0, 1);
				$to_email = mysql_result($myinfo, 0, 2);
			} elseif ($row['md_list']) {
				$id = $row['md_list'];
				$sql = "SELECT firstname, lastname, email, fax, company, phone1 FROM dental_contact WHERE contactid = '".$id."';";
				$myinfo = mysql_query($sql);
				$firstname = mysql_result($myinfo, 0, 0);
				$lastname = mysql_result($myinfo, 0, 1);
				$to_email = mysql_result($myinfo, 0, 2);
				$fax = mysql_result($myinfo, 0, 3);
				$company = mysql_result($myinfo, 0, 4);
				$phone = mysql_result($myinfo, 0, 5);
			} elseif ($row['md_referral_list']) {
				$id = $row['md_referral_list'];
				$sql = "SELECT firstname, lastname, email, fax, company, phone1 FROM dental_contact WHERE contactid = '".$id."';";
				$myinfo = mysql_query($sql);
				$firstname = mysql_result($myinfo, 0, 0);
				$lastname = mysql_result($myinfo, 0, 1);
				$to_email = mysql_result($myinfo, 0, 2);	
				$fax = mysql_result($myinfo, 0, 3);
				$company = mysql_result($myinfo, 0, 4);
				$phone = mysql_result($myinfo, 0, 5);
			}
			$to_name = $firstname . " " . $lastname;
			$send_method = $row['send_method'];
			$patientid = $row['patientid'];
			$docid = $row['docid'];
			$userid = $row['userid'];
			$templateid = $row['templateid'];
		}

		if ($send_method == "email") {
			if(empty($allowemail) && !in_array($templateid, $safeemails)) {
				$send_method = "paper";
				$sql = "UPDATE dental_letters SET send_method = 'paper' WHERE letterid = '".s_for($letterid)."';";
				$result = mysql_query($sql);
			}
		}

		// Get Doctor's Name and Email
		$sql = "SELECT name, email, phone, use_digital_fax, fax FROM dental_users WHERE userid = '".$docid."';";
		$result = mysql_query($sql);
		$doc_name = mysql_result($result, 0, 0);
		$doc_email = mysql_result($result, 0, 1);
		$doc_phone = mysql_result($result, 0, 2);
		$use_digital_fax = mysql_result($result, 0, 3);
		$doc_fax = mysql_result($result, 0, 4);

		// Send Email
		if ($send_method == 'email') {
			//$email_success = send_email($to_name, $to_email, $doc_name, $doc_email, "DSS No Subject", $message, '',$docid);
		}

		// Create PDF
		$title = "Dental Sleep Solutions";
		$filename = 'f' . $docid . '_p' . $patientid . '_t' . $templateid . '_u' . $userid . '_' . date('Y-m-d_H-i-s') . '.pdf';
		if($send_method == 'fax' && $use_digital_fax){
			$cover = "
<table>
<tr>
<td><img src=\"/manage/images/logo.gif\" /></td>
<td><center>
<b>CONFIDENTAL HEALTH INFORMATION<br />
FAX COVER SHEET</b>
</center>
</td>
</tr>
</table>
<br /><br /><br />
<b>DATE:</b> ".date('m/d/Y')."<br />
<br />
<b>TO:</b><br />
NAME: ".$to_name."<br />
PHONE: ".$phone."<br />
FAX: ".$fax."
<br /><br />
<b>FROM:</b><br />
NAME: ".$doc_name."<br />
PHONE: ".$doc_phone."<br />
FAX: ".$doc_fax."<br /><br />

TOTAL NUMBER OF PAGES:  %NUM_PAGES%
<br /><br />
<b>IF YOU RECEIVE THIS FAX IN ERROR, PLEASE CONTACT THE SENDER IMMEDIATELY AND THEN DESTROY THE FAXED MATERIALS.
<br /><br />
CONFIDENTIALITY NOTICE:</b><br />
The documents accompanying this transmission contain legally privileged health information. This information is intended only for the use of the individual or entity named above. The authorized recipient of this information is prohibited from disclosing this information to any other party unless required to do so by law or regulation and is required to destroy the information after its stated need has been fulfilled. 
<br /><br />
If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or action taken in reliance on the contents of these documents is strictly prohibited. If you have received this information in error, please notify the sender and the privacy officer immediately and arrange for the return or destruction of these documents. 
";
		}else{
			$cover = '';
		}
		$html = $message;
		$franchisee_query = "SELECT mailing_name, mailing_practice, mailing_address, mailing_city, mailing_state, mailing_zip, email FROM dental_users WHERE userid = '".$docid."';";
		$franchisee_result = mysql_query($franchisee_query);
		while ($row = mysql_fetch_assoc($franchisee_result)) {
        		$fi = $row;
		}
		$footerText = $fi['mailing_name'].' '.$fi['mailing_practice'].' '.$fi['mailing_address'].' '.$fi['mailing_city'].' '.$fi['mailing_state'].' '.$fi['mailing_zip'];
		create_pdf($title, $filename, $html, null, '', $footerText, $cover);
		$letter_query = "UPDATE dental_letters SET pdf_path = '" . $filename . "' WHERE letterid='".$letterid."';";
		$letter_result = mysql_query($letter_query);
	
		// Send Fax	
		if ($send_method == 'fax' && $use_digital_fax) {
			$subject = "Dental Sleep Solutions";
			include 'class.fax.php';
                	$filePath = $_SERVER['DOCUMENT_ROOT']."/manage/letterpdfs/".$filename;
                	$fileType = "pdf";
			$fts = new FTSSamples();
			$fax_send = $fts->OutboundFaxCreate('1'.$fax, $filename, $filePath, $fileType);
			if($fax_send !== true){
			  if($fax_send["XwsErrorInfo"] == 'FaxNumberNotAllowed'){
				$send_success = false;
			  }else{
				$send_success = false;
			  }
			}
			//$fax_success = send_fax($fax, $phone, $to_email, $to_name, $company, $subject, $doc_name, $filename, $message, $docid); 
		} 
		if ($send_success){ //($email_success || $fax_success || $send_method == 'paper') {
			$letter_query = "UPDATE dental_letters SET delivery_date = NOW(), delivered='1' WHERE letterid='".s_for($letterid)."';";
			$letter_result = mysql_query($letter_query);
			if (!$letter_result) {
				return mysql_error();
			}
			if ($send_method == 'paper') {
				return "paper";
      			}

		}else{
			$letter_query = "UPDATE dental_letters SET status='2' WHERE letterid='".s_for($letterid)."';";
                        $letter_result = mysql_query($letter_query);
			return "Letter could not be sent.";
		}
		/*
		} elseif (!$email_success) {
			return "Email could not be sent";
		} elseif (!$fax_success) {
			return "Fax could not be sent";
		}
		*/
	}
}

function send_email($to_name, $to_email, $from_name, $from_email, $subject, $message, $attachment = null, $uid) {
	require_once($_SERVER['DOCUMENT_ROOT'] . '/manage/3rdParty/swift-4.0.6/lib/swift_required.php');
	$email = Swift_Message::newInstance();

	$to = "$to_name <$to_email>";
	$from = "$from_name <$from_email>";

	$sql = "SELECT email_header, email_footer FROM dental_users WHERE userid = '".st($uid)."';"; 
	$result = mysql_query($sql);
	$my = mysql_fetch_array($result);
	$email_header_imgname = $my['email_header'];
	$email_footer_imgname = $my['email_footer'];
	if (!empty($email_header_imgname)) {
		$header_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/q_file/" . $email_header_imgname;
	} else {
		$header_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/admin/images/email/dss_email_header.jpg";
	}
	if (!empty($email_footer_imgname)) {
	  $footer_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/q_file/" . $email_footer_imgname;
	} else {
		$footer_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/admin/images/email/dss_email_footer.jpg";
	}

	$header_html =	"<img src=\"" . $email->embed(Swift_Image::fromPath($header_path)) . "\" alt=\"Dental Sleep Solutions\" />";
	$footer_html =	"<img src=\"" . $email->embed(Swift_Image::fromPath($footer_path)) . "\" alt=\"Dental Sleep Solutions\" />";

	$TextMessage = strip_tags($message,"<br>");
	$HTMLMessage = "$header_html<table width=\"600px\"><tr><td>$message</tr></td></table>$footer_html"; 
	
	$email->setSubject('Dental Sleep Solutions Correspondance');
	$email->setFrom(array($from_email => $from_name));
	$email->setTo(array($to_email => $to_name));
	$email->setBody($HTMLMessage, 'text/html');
	if ($attachment != '') {
		$email->attach(Swift_Attachment::fromPath($attachment));
	}

	$transport = Swift_SendmailTransport::newInstance('/usr/sbin/sendmail -bs');

	$mailer = Swift_Mailer::newInstance($transport);

	if (!$mailer->send($email, $failures)) {
		if (count($failures) > 0) {
			return "Rejected Email Address";
		} else {
			return false;
		}
	} else {
		return true;
	}
}

function send_fax($fax, $phone, $email, $name, $company, $subject, $sender_name, $pdf_filename, $message, $uid) {
	$sql = "SELECT fax_header, fax_footer FROM dental_users WHERE userid = '".st($uid)."';"; 
	$result = mysql_query($sql);
	$my = mysql_fetch_array($result);
	$fax_header_imgname = $my['fax_header'];
	$fax_footer_imgname = $my['fax_footer'];
	if (!empty($fax_header_imgname)) {
		$header_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/q_file/" . $fax_header_imgname;
	} /*else {
		$header_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/admin/images/email/dss_email_header.jpg";
	}*/
	if (!empty($fax_footer_imgname)) {
	  $footer_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/q_file/" . $fax_footer_imgname;
	} /*else {
		$footer_path = $_SERVER['DOCUMENT_ROOT'] . "/manage/admin/images/email/dss_email_footer.jpg";
	}*/
  $title = "Dental Sleep Solutions";
	$filename = "fax_" . $pdf_filename;
	create_pdf($title, $filename, $message, true, $header_path, $footer_path);
	$client = new SoapClient("https://faxregistration.com/sfaxws/sfaxapi.asmx?wsdl");

	$fax = preg_replace("/[^0-9]/", "", $fax);
	$phone = preg_replace("/[^0-9]/", "", $phone);

	//set fax request variables
	$sUserId = "dentalsleepsolutions"; // <-- Important: Your Sfax userID
	$sPassword = "sfaxDSS54321!"; // <-- Important: Your Sfax password
	$sRecipientName = $name;
	$sRecipientCompany = $company;
	$sRecipientPhone = "1" . $phone; // 1+; all digits only
	$sRecipientFax = "1" . $fax; // 1+; all digits only
	$sRecipientEmail = $email;
	$sSubject = $subject;
	$sDocType = "PDF"; // <--Important: tells Sfax how to process the document.
	$sDocName = $filename;
	$sImage = "";
	$sTrackingKey = $filename;
	$sDocMerge = "false";
	$sNotes = "";
	$sSenderName = $sender_name;
	// CoverSheet values are:
	// 1) “Default” – tells the fax engine to use the default cover sheet.
	// 2) “<NameOfCoverSheet>” – tells the fax engine to use the cover sheet named.
	$sCoverSheet = "Default";

	//convert c:\test.doc to Base64 string
	$filename = $_SERVER['DOCUMENT_ROOT'] . '/manage/letterpdfs/' . $filename;
	$handle = fopen($filename, "rb");
	$contents = fread($handle, filesize($filename));
	fclose($handle);
	$sImage = base64_encode($contents);

	//create fax request document
	$xml = new DOMDocument('1.0', 'utf-16');
	$xml->formatOutput = true;
	$xml->preserveWhiteSpace = false;
	$xml->appendChild($xml->createElement('FaxRequest'));
	$xml->documentElement->appendChild($xml->createElement('UserId', $sUserId));
	$xml->documentElement->appendChild($xml->createElement('Password', $sPassword));
	$xml->documentElement->appendChild($xml->createElement('RecipientName', $sRecipientName));
	$xml->documentElement->appendChild($xml->createElement('RecipientCompany', $sRecipientCompany));
	$xml->documentElement->appendChild($xml->createElement('RecipientPhone', $sRecipientPhone));
	$xml->documentElement->appendChild($xml->createElement('RecipientFax', $sRecipientFax));
	$xml->documentElement->appendChild($xml->createElement('RecipientEmail', $sRecipientEmail));
	$xml->documentElement->appendChild($xml->createElement('Subject', $sSubject));
	$xml->documentElement->appendChild($xml->createElement('DocType', $sDocType));
	$xml->documentElement->appendChild($xml->createElement('DocName', $sDocName));
	$xml->documentElement->appendChild($xml->createElement('image', $sImage));
	$xml->documentElement->appendChild($xml->createElement('TrackingKey', $sTrackingKey));
	$xml->documentElement->appendChild($xml->createElement('DocMerge', $sDocMerge));
	$xml->documentElement->appendChild($xml->createElement('Notes', $sNotes));
	$xml->documentElement->appendChild($xml->createElement('SenderName', $sSenderName));
	$xml->documentElement->appendChild($xml->createElement('CoverSheet', $sCoverSheet));

	//send fax as string
	$sXML = $xml->saveXML($xml->documentElement);
	$params = array('sDoc'=>$sXML);
	$result = $client->sendFaxString($params);

	if (strpos($result->sendFaxStringResult, "Success")) {
		return true;
	} else {
		return false;
	}
}

require_once($_SERVER['DOCUMENT_ROOT'] . '/manage/3rdParty/tcpdf/config/lang/eng.php');
require_once($_SERVER['DOCUMENT_ROOT'] . '/manage/3rdParty/tcpdf/tcpdf.php');

// Extend the TCPDF class to create custom Header and Footer
class MYPDF extends TCPDF {

		public $footerText = '';

		//Page header
		public function Header() {
				// Logo
				$image_file = K_PATH_IMAGES.'dss_print_header.jpg';
					//$this->Image($image_file, 0, 0, '', '', 'JPG', '', 'M', false, 300, '', false, false, 0, false, false, false);
			}

			// Page footer
			public function Footer() {
				// Position at 26 mm from bottom
				$this->SetY(-17);
				$this->Cell(0, 10, $this->footerText, 0, false, 'C', 0, '', 0, false, 'T', 'M');
		}
        public function AcceptPageBreak() {
                if ($this->num_columns > 1) {
                        // multi column mode
                        if ($this->current_column < ($this->num_columns - 1)) {
                                // go to next column
                                $this->selectColumn($this->current_column + 1);
                        } else {
                                // add a new page
                                $this->AddPage();
                                // set first column
                                $this->selectColumn(0);
                        }
                        // avoid page breaking from checkPageBreak()
                        return false;
                }
                $this->setMargins(18,40,18);
                return $this->AutoPageBreak;
        }
}

function create_pdf($title, $filename, $html, $fax = null, $header, $footer, $cover = '') {	
	// create new PDF document
  if ($fax) {
		global $pdf_header, $pdf_footer;
		$pdf_header = $header;
		$pdf_footer = $footer;
		// Extend the TCPDF class to create custom Header and Footer
		class FAXPDF extends TCPDF {
				//Page header
				public function Header() {
						// Logo
						global $pdf_header;
						if ($pdf_header) {
							$this->Image($pdf_header, 24, 0, '', '', 'JPG', '', 'M', false, 300, '', false, false, 0, false, false, false);
						}
					}

					// Page footer
					public function Footer() {
						// Position at 26 mm from bottom
						$this->SetY(-26);
						global $pdf_footer;
						if ($pdf_footer) {
							$this->Image($pdf_footer, 24, 281, '', '', 'JPG', '', 'M', false, 300, '', false, false, 0, false, false, false);
						}
				}
		}
		$pdf = new FAXPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
  } else {
		$pdf = new MYPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
		$pdf->footerText = $footer;
	}

	// set document information
	$pdf->SetCreator(PDF_CREATOR);
	$pdf->SetAuthor('Dental Sleep Solutions');
	$pdf->SetTitle($title);
	$pdf->SetSubject($title);
	$pdf->SetKeywords('DSS Correspondance');

	// set default monospaced font
	$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

	//set margins
	$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
	$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
	$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

	//set auto page breaks
	$pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

	//set image scale factor
	$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

	//set some language-dependent strings
	$pdf->setLanguageArray($l);

	// set font
	$pdf->SetFont('dejavusans', '', 10);

	if($cover != ''){
		$cover = str_replace('%NUM_PAGES%', $pdf->getAliasNbPages(), $cover);
		$pdf->AddPage();
  		$pdf->writeHTML($cover, true, false, true, false, '');
	}

	// add a page
	$pdf->AddPage();

	// output the HTML content
	$pdf->writeHTML($html, true, false, true, false, '');
        //Close and output PDF document
	//WORK AROUND FOR MASS LETTER CREATION
        $pdf->Output($_SERVER['DOCUMENT_ROOT'] . '/manage/letterpdfs2/' . $filename, 'F');
	//Close and output PDF document
	$pdf->Output($_SERVER['DOCUMENT_ROOT'] . '/manage/letterpdfs/' . $filename, 'F');
}


//reset letter
function reset_letter($letterid){
  $sql = "UPDATE dental_letters set template='', edit_userid=null, edit_date=null WHERE letterid='".mysql_real_escape_string($letterid)."'";
  mysql_query($sql);
}

/**
  * gets letters that were delivered for contact
  */
function get_contact_sent_letters($contactid){
  $s = "SELECT * from dental_letters WHERE delivered=1 AND 
		(FIND_IN_SET('".$contactid."', md_list) OR
		FIND_IN_SET('".$contactid."', md_referral_list))";
  $q = mysql_query($s);
  $num = mysql_num_rows($q);
  return $num;
}

/**
  * gets letters that were not delivered for contact
  */
function get_contact_pending_letters($contactid){
  $s = "SELECT * from dental_letters WHERE delivered=0 AND 
                (FIND_IN_SET('".$contactid."', md_list) OR
                FIND_IN_SET('".$contactid."', md_referral_list))";
  $q = mysql_query($s);
  return mysql_num_rows($q);
}


/* Set $parent to true if you want to delete the original letter including all contacts
 * if $parent is false or not set, one contact will be removed from the letter and a new letter will be created
 * with the deleted flag set to true.
 * $type is either patient, md, or md_referral.  It refers to the type of contact who's letter is being deleted
 * $recipientid is the id of the contact to be removed from the original letter
 * $template is for a modified template (including tokens) if the original template has been edited.
 */
function delete_letter($letterid, $parent = null, $type, $recipientid, $template = null) {
$rval = '';
  $c_sql = "SELECT patientid, topatient, md_list, md_referral_list FROM dental_letters WHERE letterid='".mysql_real_escape_string($letterid)."'";
  $c_q = mysql_query($c_sql);
  $c_r = mysql_fetch_assoc($c_q);
  $contacts = get_contact_info((($c_r['topatient'] == "1") ? $c_r['patientid'] : ''), $c_r['md_list'], $c_r['md_referral_list']);
  $total_contacts = count($contacts['patient']) + count($contacts['mds']) + count($contacts['md_referrals']);
  if (!isset($letterid)) {
		return false;
  } elseif ( $total_contacts == 1) {
		$letter_query = "UPDATE dental_letters SET parentid=null, deleted='1' WHERE letterid='".$letterid."';";
		$letter_result = mysql_query($letter_query);
 		$parent_query = "UPDATE dental_letters SET parentid=null WHERE parentid='".$letterid."';";
		$parent_result = mysql_query($parent_query);
		return $letter_result;
  }else {
    $select_letter = "SELECT patientid, info_id, templateid, generated_date, send_method, topatient, md_list, md_referral_list FROM dental_letters WHERE letterid = '".$letterid."';";
		$select_result = mysql_query($select_letter);
		while ($row = mysql_fetch_assoc($select_result)) {
			$deleted = '1';
			if ($type == 'patient') {
				$topatient = '1';
				$removepatient = '0';
			} elseif ($type == 'md') {
				$md_list = $recipientid;
				$mds = explode(",", $row['md_list']);
				$key = array_search($recipientid, $mds);
				unset($mds[$key]);
				$new_mds = implode(",", $mds);
			} elseif ($type == 'md_referral') {
				$md_referral_list = $recipientid;
				$md_referrals = explode(",", $row['md_referral_list']);
				$key = array_search($recipientid, $md_referrals);
				unset($md_referrals[$key]);
				$new_md_referrals = implode(",", $md_referrals);
			}
		 	$letter = create_letter($row['templateid'], $row['patientid'], $row['info_id'], $topatient, $md_list, $md_referral_list, $letterid, $template, $row['send_method'], '', $deleted); 	
		}
 		if (is_numeric($letter)) {
			if ($type == 'patient') {
				$update_letters = "UPDATE dental_letters SET topatient='".$removepatient."' WHERE letterid='".$letterid."';";
			} elseif ($type == 'md') {
				$update_letters = "UPDATE dental_letters SET md_list='".$new_mds."' WHERE letterid='".$letterid."';";
			} elseif ($type == 'md_referral') {
				$update_letters = "UPDATE dental_letters SET md_referral_list='".$new_md_referrals."' WHERE letterid='".$letterid."';";
			}
			$update_result = mysql_query($update_letters);

      if (!$update_result) {
				return false;
			} else {
				return $letter;
			}
		}
  }
}

/**
 * Deletes all pending letters for specified contact
 *
 */
function delete_contact_letters($contact){
  $l_sql = "SELECT * from dental_letters
		WHERE FIND_IN_SET('".$contact."', md_list)
			AND status=0 AND delivered=0";
  $l_q = mysql_query($l_sql);
  while($l_r = mysql_fetch_assoc($l_q)){
    $lid = $l_r['letterid'];
    delete_letter($lid, false, 'md', $contact);
  }

  $l_sql = "SELECT * from dental_letters
                WHERE FIND_IN_SET('".$contact."', md_referral_list)
                        AND status=0";
  $l_q = mysql_query($l_sql);
  while($l_r = mysql_fetch_assoc($l_q)){
    $lid = $l_r['letterid'];
    delete_letter($lid, false, 'md_referral', $contact);
  }

}


/**
 * Returns a mysql resultset resource for dental_users table on success,
 * false otherwise. Only franchisees are included (no staff).
 */
function get_franchisees() {
    $sql = "SELECT * FROM dental_users WHERE docid = 0 ORDER BY name ASC";
    return mysql_query($sql);
}

/**
 * Returns a mysql resultset resource for dental_patients table on success,
 * false otherwise.
 *
 * @param $franchisee_id Required. Limits the patients returned by
 *                       the franchisee id.
 */
function get_patients($franchisee_id = -1) {
    $sql = "SELECT * FROM dental_patients WHERE docid = $franchisee_id ORDER BY lastname ASC, firstname ASC";
    return mysql_query($sql);
}

/**
 * Returns the class 'arrow_asc' or 'arrow_desc' depending on the params
 * passed in to the function.  Returns false if $sort_by or $sort_compare_to
 * are null.
 *
 * @param $sort_by Required. The db table column being sorted.
 * @param $sort_compare_to Required. The html table column we are checking.
 * @param $sort_direction Optional (default 'asc'). Direction of the sort (desc|asc).
 */
function get_sort_arrow_class($sort_by, $sort_compare_to, $sort_direction = 'asc') {
    print "$sort_by:$sort_compare_to ";

    $arrow = '';
    
    if ($sort_by == $sort_compare_to) {
        $arrow .= 'arrow_' . strtolower($sort_direction);
    }
    
    return $arrow;
}

function get_sort_dir($sort_by, $sort_compare_to, $current_sort_dir = 'asc') {
    $direction = $current_sort_dir;
    
    if ($sort_by == $sort_compare_to) {
        $direction = (strtolower($current_sort_dir) == 'asc') ? 'desc' : 'asc';
    }
    
    return $direction;
}


function time_ago_format($seconds_ago){
  $second = 1;
  $minute = 60 * $second;
  $hour = 60 * $minute;
  $day = 24 * $hour;
  $month = 30 * $day;

  if ($seconds_ago < 0)
  {
    return "";
  }
  if ($seconds_ago < $minute)
  {
    return $seconds_ago == 1 ? "one second" : $seconds_ago + " seconds";
  }
  if ($seconds_ago < $hour)
  {
    return floor($seconds_ago/$minute)." minutes";
  }
  if ($seconds_ago < $day)
  {
    return floor($seconds_ago/$hour) . " hours";
  }
  if( $seconds_ago < $month)
  {
    return floor($seconds_ago/$day) . " days";
  }
  return floor($seconds_ago/$month) . " months";
}

function date_in_words_until($date){
  return time_ago_format(strtotime($date) - date('U'));
}

?>
